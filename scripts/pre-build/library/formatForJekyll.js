const prettier = require("prettier");

const formatForJekyll = ({
  title,
  sitePath,
  addBodyClass,
  content,
  enableSidebar = false,
  githubPath,
  head = null,
  footer = null,
}) => {
  const permalink = `/ARIA/apg/${sitePath}`;

  let headContent = '';
  let skipToScriptTag = `<script src="{{ '/content-assets/wai-aria-practices/shared/js/skipto.js' | relative_url }}"`;
  let skipToScriptData = null;

  let hasReadThisFirstScript = false;
  let readThisFirstScriptTag = `<script src="{{ '/content-assets/wai-aria-practices/shared/js/read-this-first.js' | relative_url }}"`;
  let readThisFirstScriptData = null;

  if (head) {
    // skipto.js modification [START]
    // Check if skipto.js script has data attributes to include
    skipToScriptData = head.querySelector('script[data-skipto]')?.getAttribute('data-skipto');
    if (skipToScriptData) skipToScriptTag += `data-skipto="${skipToScriptData}"`;

    // Remove skipto.js script tag in head to avoid loading twice; it's always included through `formattedSkipToScript`
    const skipToScriptTagToRemove = head.querySelectorAll('script').find(el => el.getAttribute('src').includes('js/skipto.js'));
    if (skipToScriptTagToRemove) skipToScriptTagToRemove.remove();
    // skipto.js modification [END]

    // read-this-first.js modification [START]
    // Check if read-this-first.js has data attributes to include
    readThisFirstScriptData = head.querySelector('script[data-read-this-first]')?.getAttribute('data-read-this-first');
    if (readThisFirstScriptData) readThisFirstScriptTag += `data-read-this-first="${readThisFirstScriptData}"`;

    // Remove read-this-first.js script tag in head to avoid loading twice; it's always included through `formattedSkipToScript`
    const readThisFirstScriptTagToRemove = head.querySelectorAll('script').find(el => el.getAttribute('src').includes('js/read-this-first.js'));
    if (readThisFirstScriptTagToRemove) {
      hasReadThisFirstScript = true;
      readThisFirstScriptTagToRemove.remove();
    }
    // read-this-first.js modification [END]
    headContent = head.innerHTML;
  }
  skipToScriptTag += '></script>';
  readThisFirstScriptTag += '></script>';

  // Must be formatted because html which is indented by 4 spaces
  // will be interpreted as a code block by the markdown engine
  const formattedHead = prettier.format(headContent, { parser: "html" });
  const formattedSkipToScript = prettier.format(skipToScriptTag, { parser: "html" });
  const formattedReadThisFirstScript = prettier.format(readThisFirstScriptTag, { parser: "html" });

  return `---
# This file was generated by scripts/pre-build/library/formatForJekyll.js
title: "${title}"
ref: ${permalink}

github:
  repository: w3c/aria-practices
  branch: main
  path: ${githubPath}
feedbackmail: public-aria-practices@w3.org
permalink: ${permalink}

sidebar: ${enableSidebar}

${!footer ? "" : `footer: "${footer.replace(/\n/g, "").replace(/"/g, "'")}"`}

# Context here: https://github.com/w3c/wai-aria-practices/issues/31
type_of_guidance: APG

lang: en
---
${formattedHead}
${/* ${prettier.format(` */ ""}
<link 
  rel="stylesheet"
  href="{{ '/content-assets/wai-aria-practices/styles.css' | relative_url }}"
>
<!-- Code highlighting styles -->
<link 
  rel="stylesheet"
  href="{{ '/content-assets/wai-aria-practices/shared/css/github.css' | relative_url }}"
>
${
  !(addBodyClass || enableSidebar)
    ? ""
    : `
<script>
const addBodyClass = ${JSON.stringify(addBodyClass)};
const enableSidebar = ${JSON.stringify(enableSidebar)};
if (addBodyClass) document.body.classList.add(addBodyClass);
if (enableSidebar) document.body.classList.add('has-sidebar');
</script>
    `
}

${
  // Make nav items active when on children pages
  `<script>
    const parentPage = window.location.pathname.match(
      /\\/(patterns|practices|about)\\//
    )?.[1];
    if (parentPage) {
      const parentHref = 'a[href*="' + parentPage + '"]';
      document.querySelector(parentHref).classList.add('active');
    }
  </script>`
}
<div>
${content}
</div>
${formattedSkipToScript}${hasReadThisFirstScript ? formattedReadThisFirstScript : ''}
${/* `, { parser: "html" })} */ ""}`;
};

module.exports = formatForJekyll;
